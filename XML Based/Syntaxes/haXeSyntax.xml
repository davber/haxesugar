<?xml version="1.0"?>
<syntax name="com.davber.haxe">
	<zones>		
			<!-- Package -->
			<zone name="container.package.haxe">
				<expression>\b(package)\s*([a-zA-Z_\.]*)?</expression>
				<capture number="1" name="keyword.package.haxe" />
				<capture number="2" name="name.haxe" />
			</zone>
			<!-- Import -->
			<zone name="container.import.haxe">
				<expression>\b(import)\s+([a-zA-Z_\.]*)</expression>
				<capture number="1" name="keyword.definition.import.haxe" />
				<capture number="2" name="name.haxe" />
			</zone>
		
			<!-- Class -->
			<zone name="container.class.haxe">
					<expression>\b(class)\s+([a-zA-Z_$]\w*)\s*([a-zA-Z\w\s]*)</expression>
					<capture number="1" name="keyword.definition.class.haxe" />
					<capture number="2" name="name.haxe" />	
			</zone>
			<include collection="language.haxe" />
			<include collection="metadata.comment" />
	</zones>
	
	<library>
		<collection name="language.haxe">
			<include collection="container.method.haxe" />
			<include collection="container.block.haxe" />
			<include collection="keyword.haxe" />
			<include collection="delimiter.haxe" />
			<include collection="literal.string" />
			<include collection="literal.numeric" />
			<include collection="literal.keyword" />
			<include collection="literal.collection" />
			<include collection="metadata.comment" />
		</collection>
		
		<!-- Function -->
		<collection name="container.method.haxe">
			<zone name="container.method.haxe">
				<starts-with>
					<expression>\b(function)\s?+([a-zA-Z_$]\w*)?\s*(\()</expression>
					<capture number="1" name="keyword.definition.function.haxe" />
					<capture number="2" name="name.haxe" />
					<capture number="3" name="delimiter.balanced.parenthesis.condition.begin.haxe"/>
				</starts-with>
				<ends-with>
					<expression>\)(:[a-zA-Z\w]*)?</expression>
					<capture number="1" name="delimiter.balanced.parenthesis.condition.end.haxe"/>
				</ends-with>
				<subzones>
					<include collection="container.block.subzones.haxe" />
				</subzones>
			</zone>
		</collection>
		
		<!-- Containers from (grabbed, but modified, from PHP.sugar via AS3.sugar...) -->
		<collection name="container.block.haxe">
            <zone name="container.block.if.haxe">
                <starts-with>
                    <expression>(\bif\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.if.haxe" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.haxe" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.haxe" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.haxe" />
                </subzones>
            </zone>
            <zone name="container.block.elseif.haxe">
                <starts-with>
                    <expression>(\belse\s*if\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.elseif.haxe" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.haxe" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.haxe" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.haxe" />
                </subzones>
            </zone>
            <zone name="container.block.else.haxe">
                <expression>(\belse\b)</expression>
                <capture number="1" name="keyword.control.flow.else.haxe" />
                <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.haxe" />
            </zone>
            <zone name="container.block.for.haxe">
                <starts-with>
                    <expression>(\bfor\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.for.haxe" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.haxe" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.haxe" />
                </ends-with>
                <subzones>
										<zone name="operator.in.haxe">
                        <expression>in</expression>
                    </zone>
                    <include collection="container.block.subzones.haxe" />
                </subzones>
            </zone>
            <zone name="container.block.while.haxe">
                <starts-with>
                    <expression>(\bwhile\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.while.haxe" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.haxe" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.haxe" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.haxe" />
                </subzones>
            </zone>
            <zone name="container.block.dowhile.haxe">
                
                    <expression>\b(do)</expression>
                    <capture number="1" name="keyword.control.flow.dowhile.haxe" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.haxe" />

            </zone>
            <zone name="container.block.switch.haxe">
                <starts-with>
                    <expression>(\bswitch\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.switch.haxe" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.haxe" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.haxe" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.haxe" />
                </subzones>
            </zone>
            <zone name="container.block.try.haxe">
                <expression>(\btry\b)</expression>
                <capture number="1" name="keyword.control.flow.try.haxe" />
            </zone>
            <zone name="container.block.catch.haxe">
                <starts-with>
                    <expression>(\bcatch\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.catch.haxe" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.haxe" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.haxe" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.haxe" />
                </subzones>
            </zone>
        </collection>
		
		<collection name="container.block.subzones.haxe">
			<include collection="metadata.comment.haxe" />
	        <include collection="literal.collection.haxe" />
	        <include collection="container.block.haxe" />
	        <include collection="literal.keyword.haxe" />
	        <include collection="identifier.function.haxe" />
	        <include collection="delimiter.haxe" />
	        <include collection="operator.haxe" />
	        <include collection="identifier.variable.haxe" />
	        <include collection="identifier.class.haxe" />
	        <include collection="literal.string.haxe" />
	        <include collection="literal.numeric.haxe" />
	        <include collection="keyword.haxe" />
		</collection>
		<!-- End from PHP Sugar -->
		
		<!-- Delimiters (grabbed from elliottcable's Ruby.sugar via the AS3 sugar...) -->
        
        <collection name="delimiter.haxe">
            <zone name="delimiter.terminator.haxe">
                <expression>\;</expression>
            </zone>
            <zone name="delimiter.separator.comma.haxe">
                <expression>,</expression>
            </zone>
            <zone name="delimiter.separator.pairing.haxe">
                <expression>=></expression>
            </zone>
            <zone name="delimiter.balanced.curly-brace.begin.haxe">
                <expression>\{</expression>
            </zone>
            <zone name="delimiter.balanced.curly-brace.end.haxe">
                <expression>\}</expression>
            </zone>
            <zone name="delimiter.balanced.parenthesis.begin.haxe">
                <expression>\(</expression>
            </zone>
            <zone name="delimiter.balanced.parenthesis.end.haxe">
                <expression>\)</expression>
            </zone>
            <zone name="delimiter.balanced.square-brace.begin.haxe">
                <expression>\[</expression>
            </zone>
            <zone name="delimiter.balanced.square-brace.end.haxe">
                <expression>\]</expression>
            </zone>
        </collection>
		
		<collection name="comment.haxe">
			<zone name="comment.block.documentation">
				<starts-with>
					<expression>/\*\*</expression>
					<capture number="0" name="punctuation.definition.begin"/>
				</starts-with>
				<ends-with>
					<expression>\*/</expression>
					<capture number="0" name="punctuation.definition.end"/>
				</ends-with>
			</zone>
			<zone name="comment.block">
				<starts-with>
					<expression>/\*</expression>
					<capture number="0" name="punctuation.definition.begin"/>
				</starts-with>
				<ends-with>
					<expression>\*/</expression>
					<capture number="0" name="punctuation.definition.end"/>
				</ends-with>
			</zone>
			<zone name="comment.line.double-slash">
				<expression>(//).*$\n?</expression>
				<capture number="1" name="punctuation.definition.begin"/>
			</zone>
		</collection>
		
		<!-- Keywords -->
		<collection name="keyword.haxe">
			<zone name="keyword.definition.haxe">
				<expression>\b(package|class|function|import|interface|extends|implements|var)</expression>
			</zone>
			<zone name="keyword.definition.class.top-level.haxe">
				<expression>\b(Array(Access)?|Bool|Class|Date(Tools)?|Dynamic|EReg|Enum|Float|Hash|Int(Hash|Iter)?|Itera(ble|tor)|Lambda|List|Math|Null|Reflect|Std|Sting(Buf|Tools)?|Type|UInt|ValueType|Void|Xml(Type)?)\b</expression>
			</zone>
			<zone name="keyword.definition.class.flash.haxe">
				<expression>\b(Accessibility|Boot|Button|Camera|Color|ContextMenu(Item)?|ExtendedKey|Key|Lib|LoadVars|LocalConnection|Microphone|Mouse|MovieClip(Loader)?|Net(Connection|Stream)|PrintJob|Selection(Listener)?|SharedObject|Sound|Stage|System|Text(Field|Format|Snapshot)|Video|XML(Request|Socket))\b</expression>
			</zone>
			<zone name="keyword.definition.class.flash9.haxe">
				<expression>\b(Boot|Error|Lib|Memory|Vector)\b</expression>
			</zone>
			<zone name="keyword.definition.class.haxe.haxe">
				<expression>\b(BaseCode|Fast(Cell|List)|Firebug|Http|Int32|Log|Md5|PosInfos|Public|Resource|Serializer|Stack(Item)?|Template|Timer(Queue)?|TypeResolver|Unserializer)\b</expression>
			</zone>
			<zone name="keyword.definition.class.js.haxe">
				<expression>\b(Anchor|Body|Boot|Button|Checkbox|Document|Dom|Event|FileUpload|Form(Element)?|Frame(set)?|Hidden|History|Html(Collection|Dom)|IFrame|Image|Lib|Link|Location|MetaDom|Navigator|Option|Password|Radio|Reset|SWFObject|Screen|Select(ion)?|Style(Sheet)?|Submit|Text(area)?|Window|XML(HttpRequest|Socket))\b</expression>
			</zone>
			<zone name="keyword.definition.class.neko.haxe">
				<expression>\b(Boot|File(Kind|Stat|System)|Lib|Native(Array|String)|Random|Sys|Utf8|Web)\b</expression>
			</zone>
			<zone name="keyword.definition.class.php.haxe">
				<expression>\b(Boot|CacheLimiter|Exception|File(Kind|Stat|System)|HException|Lib|Native(Array|String)|Session|Sys|Utf8|Web)\b</expression>
			</zone>
			<zone name="keyword.control.flow.haxe">
                <expression>\b(break|case|continue|default|do|else(if)?|for|if|switch|while|return)</expression>
            </zone>
			<zone name="keyword.modifier.scope.haxe">
				<expression>\b(public|private|protected|static|dynamic|override|inline)</expression>
			</zone>
		</collection>
		
		<!-- Literals Grabbed from PHP.sugar (via the AS3 sugar...) -->
	    
	    <collection name="literal.string">
            <zone name="literal.string.quoted.single">
                <starts-with>
                    <expression>'</expression>
                    <capture number="0" name="delimiter.balanced.quote.single.begin"/>
                </starts-with>
                <ends-with>
                    <expression>'</expression>
                    <capture number="0" name="delimiter.balanced.quote.single.end"/>
                </ends-with>
                <subzones>
                    <zone name="literal.escape.brief">
                        <!-- 'A single-quoted string with \'escape sequences\'' -->
                        <expression>(\\)('|\\)</expression>
                        <capture number="1" name="delimiter.seperator.escape"/>
                        <capture number="2" name="character"/>
                    </zone>
                </subzones>
            </zone>
            <zone name="literal.string.quoted.double">
                <starts-with>
                    <expression>"</expression>
                    <capture number="0" name="delimiter.balanced.quote.double.begin"/>
                </starts-with>
                <ends-with>
                    <expression>"</expression>
                    <capture number="0" name="delimiter.balanced.quote.double.begin"/>
                </ends-with>
                <subzones>
                    <include collection="identifier.variable" />
                    <zone name="literal.escape.brief">
                        <!-- 'A single-quoted string with \'escape sequences\'' -->
                        <expression>(\\)("|\\)</expression>
                        <capture number="1" name="delimiter.seperator.escape"/>
                        <capture number="2" name="character"/>
                    </zone>
                </subzones>
            </zone>
	    </collection>
	    
        <collection name="literal.numeric">
            <!--
            I want to seperately hilight all the different types of
            literal.numerics. So, we have to provide multiple similar definitions
            of a literal.numeric.
            
			Grabbed from PHP Sugar
            Grabbed from elliottcable's Ruby.sugar
            -->
            <!-- 01756 -->
            <zone name="literal.numeric.integer.octal">
                <expression>\b(0)([0-7]+)\b</expression>
                <capture number="1" name="numeric.delimiter.octal.initial-zero"/>
                <capture number="2" name="numeric.octal.value"/>
            </zone>
            <!-- 0b010010110 -->
            <zone name="literal.numeric.integer.binary">
                <expression>\b(0(?:b|B))([01]+)\b</expression>
                <capture number="1" name="numeric.delimiter.binary.initial-zero-b"/>
                <capture number="2" name="numeric.binary.value"/>
            </zone>
            <!-- 0xDEADBEEF586 -->
            <zone name="literal.numeric.integer.hex">
                <expression>\b(0(?:x|X))([0-9a-fA-F]+)\b</expression>
                <capture number="1" name="numeric.delimiter.hexadecimal.initial-zero-x"/>
                <capture number="2" name="numeric.hexadecimal.value"/>
            </zone>
            <!-- 142.87e3, 0.22e8 -->
            <zone name="literal.numeric.float.with-exponent">
                <expression>\b(0|[1-9][0-9]*)(\.)([0-9]+)(e|E)(-?[0-9]+)\b</expression>
                <capture number="1" name="integral.value"/>
                <capture number="2" name="delimiter.seperator.radix-point"/>
                <capture number="3" name="fractional.value"/>
                <capture number="4" name="literal.numeric.exponent.delimiter"/>
                <capture number="5" name="literal.numeric.exponent.value"/>
            </zone>
            <!-- 142.87, 0.22 -->
            <zone name="literal.numeric.float">
                <expression>\b(0|[1-9][0-9]*)(\.)([0-9]+)\b</expression>
                <capture number="1" name="integral.value"/>
                <capture number="2" name="delimiter.seperator.radix-point"/>
                <capture number="3" name="fractional.value"/>
            </zone>
            <!-- 142e3, 0e8 -->
            <zone name="literal.numeric.integer.decimal.with-exponent">
                <expression>\b(0|[1-9][0-9]*)(e|E)(-?[0-9]+)\b</expression>
                <capture number="1" name="integral.value"/>
                <capture number="2" name="literal.numeric.exponent.delimiter"/>
                <capture number="3" name="literal.numeric.exponent.value"/>
            </zone>
            <!-- 142e3, 0e8 -->
            <zone name="literal.numeric.integer.decimal">
                <expression>\b(0|[1-9][0-9]*)\b</expression>
                <capture number="1" name="integral.value"/>
            </zone>
        </collection>
        
        <collection name="literal.keyword">
            <!-- true -->
            <zone name="literal.keyword.bool.true">
            	<expression>\btrue\b</expression>
            </zone>
            <!-- false -->
            <zone name="literal.keyword.bool.false">
            	<expression>\bfalse\b</expression>
            </zone>
            <!-- null -->
            <zone name="literal.keyword.nothing.null">
            	<expression>\bnull\b</expression>
            </zone>
						<!-- trace -->
            <zone name="literal.keyword.constant.trace">
            	<expression>\btrace\b</expression>
            </zone>
        </collection>

		<!-- Metadata grabbed from PHP.sugar, but modified to handle #ifdef's -->
		<collection name="metadata.comment">
			<!-- // comment -->
			<zone name="metadata.comment.line.double-slash">
				<expression>(//)(\s?(.*)?$\n?)</expression>
				<capture number="1" name="delimiter.separator.double-slash.comment.begin" />
				<capture number="3" name="content" />
			</zone>
			
			<zone name="metadata.comment.documentation">
				<starts-with>
					<expression>(/\*\*)(\**)</expression>
					<capture number="1" name="delimiter.separator.slash.double-asterisk.comment.begin"/>
				</starts-with>
				<ends-with>
					<expression>(\**)(\*/)</expression>
					<capture number="2" name="delimiter.separator.slash.single-asterisk.comment.end"/>
				</ends-with>
				<subzones>
					<zone name="comment.line">
						<starts-with>
							<expression>(\*)</expression>
							<capture number="1" name="delimiter.separator.asterisk" />
						</starts-with>
						<ends-with>
							<expression>$\n?</expression>
						</ends-with>
						<subzones>
							<include collection="metadata.comment.asDoc" />
							<zone name="content">
								<expressoin>(.*)?</expressoin>
								<capture number="3" name="content" />
							</zone>
						</subzones>
					</zone>
				</subzones>
			</zone>			

			<zone name="metadata.comment.block">
				<starts-with>
					<expression>(/\*)</expression>
					<capture number="1" name="delimiter.separator.slash.single-asterisk.comment.begin"/>
				</starts-with>
				<ends-with>
					<expression>(\*/)</expression>
					<capture number="1" name="delimiter.separator.slash.single-asterisk.comment.end"/>
				</ends-with>
			</zone>
			
			<zone name="metadata.cond.if">
				<expression>(#(:else)?if)\s+([^\s]+)</expression>
				<capture number="1" name="keyword.preprocess.if" />
				<capture number="2" name="preprocess.cond" />
			</zone>
			
			<zone name="metadata.cond.else">
				<expression>(#else)</expression>
				<capture number="1" name="keyword.preprocess.else" />
			</zone>
			
			<zone name="metadata.cond.end">
				<expression>(#end)</expression>
				<capture number="1" name="keyword.preprocess.end" />
			</zone>
			
	    </collection>
		
	</library>
</syntax>